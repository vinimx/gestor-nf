-- =====================================================
-- FIX DEFINITIVO: RLS SIMPLIFICADO (SEM ROLES)
-- =====================================================
-- NOVA ARQUITETURA: Todos os usu√°rios t√™m acesso completo
-- N√£o h√° mais verifica√ß√£o de roles (admin, accountant, viewer)
-- Acesso √© apenas para o escrit√≥rio (todos s√£o admins)
-- =====================================================

BEGIN;

-- ========================================
-- PASSO 1: LIMPEZA TOTAL
-- ========================================

-- 1.1: Remover TODAS as pol√≠ticas existentes
DO $$ 
DECLARE 
    pol record;
BEGIN
    FOR pol IN 
        SELECT policyname 
        FROM pg_policies 
        WHERE tablename = 'users_profile'
    LOOP
        EXECUTE format('DROP POLICY IF EXISTS %I ON users_profile', pol.policyname);
        RAISE NOTICE 'üóëÔ∏è  Pol√≠tica removida: %', pol.policyname;
    END LOOP;
END $$;

-- 1.2: Desabilitar RLS temporariamente
ALTER TABLE users_profile DISABLE ROW LEVEL SECURITY;

-- ========================================
-- PASSO 2: VERIFICAR/CRIAR PROFILE
-- ========================================

-- 2.1: Atualizar todos os usu√°rios para role 'admin' (padr√£o)
UPDATE users_profile 
SET role = 'admin' 
WHERE role IS NULL OR role != 'admin';

-- 2.2: Garantir que seu profile existe como admin
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM users_profile 
        WHERE id = 'aadd1d32-c7e4-41dd-85c3-ba1f68729000'
    ) THEN
        -- Criar se n√£o existir
        INSERT INTO users_profile (id, email, role)
        VALUES (
            'aadd1d32-c7e4-41dd-85c3-ba1f68729000',
            'fiscal@ranicont.com.br',
            'admin'
        );
        RAISE NOTICE '‚úÖ Profile criado com sucesso!';
    ELSE
        -- Confirmar que est√° como admin
        UPDATE users_profile 
        SET role = 'admin' 
        WHERE id = 'aadd1d32-c7e4-41dd-85c3-ba1f68729000';
        RAISE NOTICE '‚úÖ Profile atualizado para admin!';
    END IF;
END $$;

-- ========================================
-- PASSO 3: PERMISS√ïES DA TABELA
-- ========================================

-- 3.1: Garantir permiss√µes completas para authenticated
GRANT ALL ON TABLE users_profile TO authenticated;
GRANT ALL ON TABLE users_profile TO service_role;

-- 3.2: Permitir anon apenas INSERT (para signup)
GRANT SELECT, INSERT ON TABLE users_profile TO anon;

-- ‚úÖ Permiss√µes configuradas!

-- ========================================
-- PASSO 4: HABILITAR RLS COM POL√çTICAS SIMPLIFICADAS
-- ========================================

-- 4.1: Habilitar RLS
ALTER TABLE users_profile ENABLE ROW LEVEL SECURITY;

-- 4.2: Pol√≠tica √öNICA - Usu√°rios autenticados podem ver e editar SEU PR√ìPRIO perfil
CREATE POLICY "authenticated_users_all_own_profile"
ON users_profile
FOR ALL
TO authenticated
USING (auth.uid() = id)
WITH CHECK (auth.uid() = id);

-- 4.3: Pol√≠tica para anon (signup)
CREATE POLICY "anon_insert_on_signup"
ON users_profile
FOR INSERT
TO anon
WITH CHECK (true);

-- ‚úÖ Pol√≠ticas RLS simplificadas criadas!

COMMIT;

-- ========================================
-- PASSO 5: VERIFICA√á√ïES FINAIS
-- ========================================

-- 5.1: Confirmar que RLS est√° habilitado
SELECT 
    '‚úÖ RLS Status' as "Verifica√ß√£o",
    CASE 
        WHEN rowsecurity THEN 'üü¢ HABILITADO' 
        ELSE 'üî¥ DESABILITADO' 
    END as "Status"
FROM pg_tables 
WHERE tablename = 'users_profile';

-- 5.2: Contar pol√≠ticas ativas
SELECT 
    '‚úÖ Total de Pol√≠ticas' as "Verifica√ß√£o",
    COUNT(*)::text || ' pol√≠ticas' as "Status"
FROM pg_policies 
WHERE tablename = 'users_profile';

-- 5.3: Listar todas as pol√≠ticas
SELECT 
    'üìã ' || policyname as "Nome da Pol√≠tica",
    cmd as "Comando",
    CASE 
        WHEN roles = '{authenticated}' THEN 'üîê Authenticated'
        WHEN roles = '{anon}' THEN 'üë§ Anonymous'
        ELSE roles::text
    END as "Para Quem"
FROM pg_policies 
WHERE tablename = 'users_profile'
ORDER BY policyname;

-- 5.4: Verificar seu profile
SELECT 
    '‚úÖ Seu Profile' as "Verifica√ß√£o",
    'üî¥ ADMIN' as "Acesso",
    email as "Email"
FROM users_profile 
WHERE id = 'aadd1d32-c7e4-41dd-85c3-ba1f68729000';

-- 5.5: Contar total de usu√°rios
SELECT 
    'üë• Total de Usu√°rios' as "Verifica√ß√£o",
    COUNT(*)::text || ' usu√°rios' as "Total",
    'Todos s√£o admins agora' as "Observa√ß√£o"
FROM users_profile;

-- 5.6: Testar query simples (deve funcionar!)
SELECT 
    'üß™ Teste de Query' as "Verifica√ß√£o",
    'Executando SELECT * FROM users_profile...' as "A√ß√£o";

-- Isso deve retornar seu profile SEM ERRO 500!
SELECT * FROM users_profile 
WHERE id = 'aadd1d32-c7e4-41dd-85c3-ba1f68729000';

-- ========================================
-- RESULTADO ESPERADO
-- ========================================
-- ‚úÖ RLS habilitado
-- ‚úÖ 2 pol√≠ticas criadas (muito mais simples!)
-- ‚úÖ Seu profile como ADMIN
-- ‚úÖ Query funciona sem erro 500!
-- ‚úÖ Sistema mais simples e direto
-- ========================================

-- ========================================
-- NOVA ARQUITETURA SIMPLIFICADA
-- ========================================
-- 
-- ‚úÖ Todos os usu√°rios = Administradores
-- ‚úÖ Sem verifica√ß√£o de roles
-- ‚úÖ Sem hierarquia de permiss√µes
-- ‚úÖ Acesso completo para todos
-- ‚úÖ Mais simples = Menos bugs
-- ‚úÖ Mais r√°pido = Melhor performance
-- 
-- Se no futuro precisar de roles diferentes:
-- - Adicionar novamente as colunas
-- - Criar pol√≠ticas espec√≠ficas
-- - Mas por enquanto: KISS (Keep It Simple, Stupid!)
-- ========================================

