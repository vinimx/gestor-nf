// Script para testar o token da FOCUS NFE
const testToken = async () => {
  try {
    console.log('üîë Testando token da FOCUS NFE...\n');
    
    // Simular a autentica√ß√£o que est√° sendo feita
    const token = process.env.NEXT_PUBLIC_FOCUS_NFE_TOKEN;
    const environment = process.env.NEXT_PUBLIC_FOCUS_NFE_ENVIRONMENT || 'homologacao';
    
    console.log('üìã Configura√ß√µes:');
    console.log('Token configurado:', token ? 'Sim' : 'N√£o');
    console.log('Token (primeiros 10 chars):', token ? token.substring(0, 10) + '...' : 'N√£o configurado');
    console.log('Ambiente:', environment);
    
    if (!token) {
      console.log('\n‚ùå ERRO: Token n√£o configurado!');
      console.log('Configure NEXT_PUBLIC_FOCUS_NFE_TOKEN no arquivo .env.local');
      return;
    }
    
    // URL base
    const baseUrl = environment === 'homologacao' 
      ? 'https://homologacao.focusnfe.com.br' 
      : 'https://api.focusnfe.com.br';
    
    console.log('\nüåê URL base:', baseUrl);
    
    // Testar autentica√ß√£o com um endpoint simples
    console.log('\nüß™ Testando autentica√ß√£o...');
    
    const authHeader = `Basic ${Buffer.from(token + ':').toString('base64')}`;
    console.log('Header de autentica√ß√£o:', authHeader.substring(0, 20) + '...');
    
    // Teste 1: Endpoint de NCMs
    console.log('\n1Ô∏è‚É£ Testando endpoint de NCMs...');
    try {
      const response = await fetch(`${baseUrl}/v2/ncms?limit=1`, {
        method: 'GET',
        headers: {
          'Authorization': authHeader,
          'Content-Type': 'application/json',
        },
      });
      
      console.log('Status:', response.status);
      console.log('Status Text:', response.statusText);
      
      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ SUCESSO: Token v√°lido!');
        console.log('Dados recebidos:', data.length, 'NCMs');
        console.log('Primeiro NCM:', data[0]?.codigo, data[0]?.descricao_completa?.substring(0, 50) + '...');
      } else {
        const errorText = await response.text();
        console.log('‚ùå ERRO:', response.status, errorText);
        
        if (response.status === 401) {
          console.log('\nüö® DIAGN√ìSTICO 401:');
          console.log('- Token pode estar inv√°lido ou expirado');
          console.log('- Verifique se o token est√° correto no painel da FOCUS NFE');
          console.log('- Confirme se a conta tem acesso √† API');
        }
      }
    } catch (error) {
      console.log('‚ùå Erro de rede:', error.message);
    }
    
    // Teste 2: Endpoint de CFOPs
    console.log('\n2Ô∏è‚É£ Testando endpoint de CFOPs...');
    try {
      const response = await fetch(`${baseUrl}/v2/cfops?limit=1`, {
        method: 'GET',
        headers: {
          'Authorization': authHeader,
          'Content-Type': 'application/json',
        },
      });
      
      console.log('Status:', response.status);
      
      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ SUCESSO: Token v√°lido para CFOPs!');
        console.log('Dados recebidos:', data.length, 'CFOPs');
        console.log('Primeiro CFOP:', data[0]?.codigo, data[0]?.descricao?.substring(0, 50) + '...');
      } else {
        const errorText = await response.text();
        console.log('‚ùå ERRO:', response.status, errorText);
      }
    } catch (error) {
      console.log('‚ùå Erro de rede:', error.message);
    }
    
    console.log('\nüí° SOLU√á√ïES POSS√çVEIS:');
    console.log('=====================');
    console.log('1. Verifique o token no painel da FOCUS NFE');
    console.log('2. Confirme se a conta tem acesso √† API');
    console.log('3. Teste com um novo token');
    console.log('4. Verifique se est√° usando o ambiente correto (homologacao/producao)');
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  }
};

testToken();
