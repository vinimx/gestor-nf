// Script para aplicar migra√ß√£o de produtos no Supabase remoto
const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

// Configura√ß√µes do Supabase (voc√™ precisa configurar essas vari√°veis)
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://jnatmqincwcetplbtmpo.supabase.co';
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || '';

if (!supabaseServiceKey) {
  console.error('‚ùå SUPABASE_SERVICE_ROLE_KEY n√£o encontrada');
  console.error('Configure a vari√°vel de ambiente SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function applyMigration() {
  try {
    console.log('üöÄ Aplicando migra√ß√£o de produtos no Supabase remoto...');
    
    // Ler arquivo de migra√ß√£o
    const migrationPath = path.join(__dirname, '../supabase/migrations/005_create_produtos_tables.sql');
    const migrationSQL = fs.readFileSync(migrationPath, 'utf8');
    
    console.log('üìÑ Conte√∫do da migra√ß√£o:');
    console.log(migrationSQL.substring(0, 200) + '...');
    
    // Executar migra√ß√£o usando RPC
    const { data, error } = await supabase.rpc('exec_sql', {
      sql: migrationSQL
    });
    
    if (error) {
      console.error('‚ùå Erro ao aplicar migra√ß√£o:', error);
      
      // Tentar executar as queries individualmente
      console.log('üîÑ Tentando executar queries individualmente...');
      
      const queries = migrationSQL.split(';').filter(q => q.trim());
      
      for (const query of queries) {
        if (query.trim()) {
          console.log('üìù Executando:', query.substring(0, 50) + '...');
          
          const { error: queryError } = await supabase.rpc('exec_sql', {
            sql: query + ';'
          });
          
          if (queryError) {
            console.error('‚ùå Erro na query:', queryError);
          } else {
            console.log('‚úÖ Query executada com sucesso');
          }
        }
      }
    } else {
      console.log('‚úÖ Migra√ß√£o aplicada com sucesso!');
    }
    
    // Verificar se as tabelas foram criadas
    console.log('üîç Verificando tabelas criadas...');
    
    const { data: tables, error: tablesError } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_schema', 'public')
      .in('table_name', ['produtos', 'categorias_produtos']);
    
    if (tablesError) {
      console.error('‚ùå Erro ao verificar tabelas:', tablesError);
    } else {
      console.log('üìã Tabelas encontradas:', tables.map(t => t.table_name));
    }
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

applyMigration();
