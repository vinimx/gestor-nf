// @ts-nocheck
import { createClient, SupabaseClient } from "@supabase/supabase-js";

declare global {
  interface Window {
    ENV?: {
      SUPABASE_URL?: string;
      SUPABASE_ANON_KEY?: string;
    }
  }
}

let _supabase: SupabaseClient | null = null;

const getSupabaseUrl = () => {
  const url = process.env.NEXT_PUBLIC_SUPABASE_URL;
  if (!url && typeof window !== 'undefined') {
    console.warn('Supabase URL not found');
  }
  return url ?? 'https://placeholder.supabase.co';
};

const getSupabaseAnonKey = () => {
  const key = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
  if (!key && typeof window !== 'undefined') {
    console.warn('Supabase Anon Key not found');
  }
  return key ?? 'placeholder-key';
};

export function getSupabase(): SupabaseClient {
  if (_supabase) return _supabase;

  const supabaseUrl = getSupabaseUrl();
  const supabaseAnonKey = getSupabaseAnonKey();

  try {
    _supabase = createClient(supabaseUrl, supabaseAnonKey);
    return _supabase;
  } catch (error) {
    console.error('Error initializing Supabase client:', error);
    _supabase = createClient('https://placeholder.supabase.co', 'placeholder-key');
    return _supabase;
  }
}